import queue
class BSTIterator:

    def __init__(self, root: Optional[TreeNode]):
        self.L=queue.LifoQueue(maxsize=0)
        self.rpt(root)
    def next(self) -> int:
        curr=self.L.get()
        if curr.right:
            self.rpt(curr.right)
        return curr.val
    def hasNext(self) -> bool:
        return not self.L.empty()
    def rpt(self,node):
        while node:
            self.L.put(node)
            node=node.left
