#leetcode

from collections import deque
class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        queue=deque()
        time=0
        c=False
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]==2:
                    queue.append((i,j))
                if grid[i][j]==1:
                    c=True
        if not queue:
            if c:
                return -1
            return 0
        def check(row,col):
            if row<0 or row>=len(grid) or col<0 or col>=len(grid[0]):
                return False
            if grid[row][col]==1:
                return True
            return False
        while queue:
            for i in range(len(queue)):
                curr=queue.popleft()
                if check(curr[0]-1,curr[1]):
                    queue.append((curr[0]-1,curr[1]))
                    grid[curr[0]-1][curr[1]]=2
                if check(curr[0],curr[1]+1):
                    queue.append((curr[0],curr[1]+1))
                    grid[curr[0]][curr[1]+1]=2
                if check(curr[0]+1,curr[1]):
                    queue.append((curr[0]+1,curr[1]))
                    grid[curr[0]+1][curr[1]]=2
                if check(curr[0],curr[1]-1):
                    queue.append((curr[0],curr[1]-1))
                    grid[curr[0]][curr[1]-1]=2
            time+=1
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]==1:
                    return -1
        return time-1
