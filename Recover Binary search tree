#leetcode

class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        self.first=self.last=None
        self.prev=None
        def test(root):
            if root is None:
                return
            test(root.left)
            if self.prev and root.val<self.prev.val:
                if self.last==None:
                    self.first=self.prev
                    self.last=root
                else:
                    self.last=root
            self.prev=root
            test(root.right)
        test(root)
        self.first.val,self.last.val=self.last.val,self.first.val
